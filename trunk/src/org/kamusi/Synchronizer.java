/**
 * Synchronizer.java
 * Created on Aug 6, 2009, 3:52:23 PM
 * @author arthur
 */
package org.kamusi;

import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.sql.PreparedStatement;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Vector;

/**
 * Synchronizer.java
 */
public class Synchronizer extends KamusiLogger
{

    /**
     * Database URL
     */
    private final String DATABASE = "jdbc:sqlite:" + System.getProperty("database");
    /**
     * Database username
     */
    private final String USERNAME = System.getProperty("database_username");
    /**
     * Database password
     */
    private final String PASSWORD = System.getProperty("database_password");

    ;
    /**
     * File that is used to logApplicationMessage updates<BR>
     * IMPORTANT: Please DO NOT edit this file by hand
     */
    private final String editLog = "log/edit.log";
    /**
     * Holds the UNIX timestamp of when the file was last updated
     */
    private String lastUpdate = "";
    /**
     * The URL of the updates
     */
    private String SYNC_URL = new KamusiProperties().getSyncURL();
    /**
     * To denote whether we can synchronize
     */
    private boolean canSync = false;
    /**
     * Encryption
     */
    private HexConverter converter;

    /**
     * Fetches the database updates
     * @param isEditorsVersion Boolean to check if its editors version
     * @throws IOException
     */
    public void synchronize(boolean isEditorsVersion) throws IOException
    {

//        TODO: Review this part. It may be failing on isEditorsVersion = false
        if (isEditorsVersion)
        {
            synchronizeDatabases();
        }

        if (updateLocalLog())
        {
            updateTimeStamp();

            String message = MessageLocalizer.formatMessage("successful_sync", null);
            logApplicationMessage(message);
            MainWindow.showInfo(message);
        }
        else
        {
            String message = MessageLocalizer.formatMessage("general_error", null);
            logApplicationMessage(message);
            MainWindow.showError(new Exception(message));
        }
    }

    /**
     * Synchronizes the local database with the online one
     * Applies only to editor's version of the software
     */
    private void synchronizeDatabases()
    {
        // COMMIT LOCAL CHANGES TO REMOTE SERVER
        if (copyLocalToRemote())
        {
            // Download remote to local
            if (copyRemoteToLocal())
            {
                canSync = true;
            }
            else
            {
                canSync = false;
            }
        }
        else
        {
            canSync = false;
        }
    }

    /**
     * Gets how much of update we have since the last sync
     * @return The size of the updates
     * @throws UnknownHostException
     * @throws MalformedURLException
     * @throws IOException
     */
    public long getSizeOfUpdate() throws
            UnknownHostException, MalformedURLException, IOException
    {
        long sizeOfUpdate = 0;

        URL url = new URL(SYNC_URL + "/fetchupdate.jsp?update=" + lastUpdate);

        URLConnection connection = url.openConnection();
        sizeOfUpdate = connection.getContentLength();
        connection.getInputStream().close();
        canSync = true;
        return sizeOfUpdate;
    }

    /**
     * Loads the changes from the remote server and writes
     * them to a local database
     */
    private boolean updateLocalLog() throws
            IOException
    {
        // NOW WE UPDATE THE CHANGES NOW TO LOCAL
        File file = new File(editLog);


        FileReader fileReader = new FileReader(file);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        String line;

        while ((line = bufferedReader.readLine()) != null)
        {
            if (line.startsWith(";"))
            {
                continue;
            }
            else if (line.trim().length() == 0)
            {
                continue;
            }
            else if (line.startsWith("#"))
            {
                continue;
            }
            else
            {
                String value = converter.getAscii(line);

                logApplicationMessage(value);

                String[] queryArray = value.split("\\|");

                Vector<String> parameters = new Vector<String>();

                for (String unit : queryArray[0].split("@"))
                {
                    parameters.add(unit);
                }

                updateLocalDatabase(queryArray[0], parameters);
            }
        }
        // Close the reader in preparation for the next line
        fileReader.close();
        return true;
    }

    /**
     * Sets the timestamp of the update logApplicationMessage file to the current
     * UNIX timestamp. Useful when querying for new database updates
     */
    private void updateTimeStamp() throws
            FileNotFoundException, IOException
    {
        FileOutputStream fileOutputStream = null;

        File file = new File(editLog);
        fileOutputStream = new FileOutputStream(file);

        long timestamp = java.util.Calendar.getInstance().getTimeInMillis();
        fileOutputStream.write("# DO NOT EDIT THIS FILE BY HAND\n".getBytes());
        fileOutputStream.write((";" + String.valueOf(timestamp) + "\n").getBytes());
    }

    /**
     * Copies remote updates to local server
     */
    private boolean copyRemoteToLocal()
    {
        try
        {
            URL url = new URL(SYNC_URL + "/fetchupdate.jsp?update=" + lastUpdate);

            logApplicationMessage("Fetching: " + url);

            URLConnection connection = url.openConnection();

            BufferedInputStream inputStream = new BufferedInputStream(connection.getInputStream());
            FileOutputStream ftpFileOutputStream = new FileOutputStream(editLog);

            int i = 0;

            byte[] bytesIn = new byte[1024];

            while ((i = inputStream.read(bytesIn)) >= 0)
            {
                ftpFileOutputStream.write(bytesIn, 0, i);
            }

            ftpFileOutputStream.close();
            inputStream.close();

            return true;
        }
        catch (MalformedURLException ex)
        {
            logApplicationMessage(ex.toString());

            return false;
        }
        catch (IOException ex)
        {
            logApplicationMessage(ex.toString());

            return false;
        }
    }

    /**
     * Commits the editings to remote server
     */
    private boolean copyLocalToRemote()
    {
        try
        {
            File inputFile = new File(editLog);
            FileReader fileReader = new FileReader(inputFile);
            BufferedReader buff = new BufferedReader(fileReader);

            String line; // <<-- added


            while (((line = buff.readLine()) != null)) // <<-- modified
            {
                if (line.startsWith(";"))
                {
                    lastUpdate = line.replace(";", "").trim();

                    continue;
                }
                if (line.startsWith("#"))
                {
                    continue;
                }
                else
                {
                    // Call the URL

//                    String data = URLEncoder.encode("column", "UTF-8") + "=" + URLEncoder.encode(column, "UTF-8");
//                    data += "&" + URLEncoder.encode("update", "UTF-8") + "=" + URLEncoder.encode(update, "UTF-8");
//                    data += "&" + URLEncoder.encode("row", "UTF-8") + "=" + URLEncoder.encode(row, "UTF-8");
//                    data += "&" + URLEncoder.encode("username", "UTF-8") + "=" + URLEncoder.encode(username, "UTF-8");
//                    data += "&" + URLEncoder.encode("oldValue", "UTF-8") + "=" + URLEncoder.encode(oldValue, "UTF-8");
//                    data += "&" + URLEncoder.encode("mode", "UTF-8") + "=" + URLEncoder.encode(mode, "UTF-8");
//
                    String data = URLEncoder.encode("update", "UTF-8") + "=" + URLEncoder.encode(line, "UTF-8");

                    // Send data
                    URL url = new URL(SYNC_URL);
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter streamWriter = new OutputStreamWriter(conn.getOutputStream());

                    logApplicationMessage(
                            "Posting: " + data + " to " + SYNC_URL);

                    streamWriter.write(data);
                    streamWriter.flush();

                    // Get the response
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    String responseLine;


                    while ((responseLine = bufferedReader.readLine()) != null)
                    {
                        // Process line...
                        System.out.println("URL Returned -> " + line);


                    }
                    streamWriter.close();
                    bufferedReader.close();

                    continue;
                }
            }
            fileReader.close();

            return true;
        }
        catch (MalformedURLException ex)
        {
            MainWindow.showError(ex);

            return false;
        }
        catch (IOException ex)
        {
            MainWindow.showError(ex);

            return false;
        }
    }

    /**
     * Initializes the class
     */
    public Synchronizer()
    {
        converter = new HexConverter();

        try
        {
            File inputFile = new File(editLog);
            FileReader fileReader = new FileReader(inputFile);
            BufferedReader buff = new BufferedReader(fileReader);

            String line; // <<-- added


            while (((line = buff.readLine()) != null)) // <<-- modified
            {

                if (line.startsWith(";"))
                {
                    lastUpdate = line.replace(";", "").trim();

                    continue;
                }
                if (line.startsWith("\\#"))
                {
                    continue;
                }
            }
        }
        catch (MalformedURLException ex)
        {
            MainWindow.showError(ex);
        }
        catch (IOException ex)
        {
            MainWindow.showError(ex);
        }
    }

    /**
     * Updates the local database with changes from the remote
     * @param queryArray
     */
    private void updateLocalDatabase(String query, Vector<String> parameters)
    {
        PreparedStatement statement = null;
        Connection connection = null;

        try
        {
            connection = DriverManager.getConnection(DATABASE, USERNAME, PASSWORD);

            statement = connection.prepareStatement(query);

            int index = 1;

            for (String param : parameters)
            {
                statement.setString(index, param);
                index++;
            }

            System.out.println(query);
            System.out.println(parameters);

            //TODO: Enable this flag
            //statement.executeUpdate();
        }
        catch (Exception ex)
        {
            MainWindow.showError(ex);
        }
        finally
        {
            try
            {
                statement.close();
                connection.close();
            }
            catch (Exception ex)
            {
                MainWindow.showError(ex);
            }
        }
    }

    /**
     * A test to check whether synchronization can take place.
     * @return boolean to show whether synchronization is possible
     */
    protected boolean canSync()
    {
        return canSync;
    }
}
