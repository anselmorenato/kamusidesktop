/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kasahorow.PALDO;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.StatusDisplayer;
import org.openide.awt.UndoRedo;
import org.openide.cookies.SaveCookie;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.kasahorow.PALDO//Paldo//EN",
autostore = false)
public final class PaldoTopComponent extends TopComponent implements TableModelListener
{

    private static PaldoTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/kasahorow/PALDO/favicon.png";
    private static final String PREFERRED_ID = "PaldoTopComponent";
    private JTable resultsTable = new JTable(new DefaultTableModel());
    private JScrollPane scroll = new JScrollPane(resultsTable);
    private UndoRedo.Manager manager = new UndoRedo.Manager();
    private final DummyNode dummyNode;
    private Translator translator;

    public PaldoTopComponent()
    {
        initComponents();
        setName(NbBundle.getMessage(PaldoTopComponent.class, "CTL_PaldoTopComponent"));
        setToolTipText(NbBundle.getMessage(PaldoTopComponent.class, "HINT_PaldoTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        initComponents();

        translator = new Translator();

        EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                wordField.requestFocusInWindow(); // Makes the cursor go to this field on startup
            }
        });

        try
        {
            //Load database driver
            Class.forName("org.sqlite.JDBC").newInstance();
        }
        catch (Exception ex)
        {
            Exceptions.printStackTrace(ex);
        }

        wordField.getDocument().addUndoableEditListener(manager);

        setActivatedNodes(new Node[]
                {
                    dummyNode = new DummyNode()
                });

        wordField.getDocument().addDocumentListener(new DocumentListener()
        {

            @Override
            public void insertUpdate(DocumentEvent arg0)
            {
                dummyNode.fire(true);
            }

            @Override
            public void removeUpdate(DocumentEvent arg0)
            {
                dummyNode.fire(true);
            }

            @Override
            public void changedUpdate(DocumentEvent arg0)
            {
                dummyNode.fire(true);
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topComponent1 = new org.openide.windows.TopComponent();
        optionsPanel = new javax.swing.JPanel();
        enToSwButton = new javax.swing.JRadioButton();
        swToEnButton = new javax.swing.JRadioButton();
        wordField = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();
        swahiliExampleCheck = new javax.swing.JCheckBox();
        englishExampleCheck = new javax.swing.JCheckBox();
        swahiliPluralCheck = new javax.swing.JCheckBox();
        englishPluralCheck = new javax.swing.JCheckBox();
        informationLabel = new javax.swing.JLabel();
        wordlabel = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JPanel();

        optionsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        enToSwButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(enToSwButton, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.enToSwButton.text")); // NOI18N
        enToSwButton.setFocusCycleRoot(true);
        enToSwButton.setRequestFocusEnabled(false);
        enToSwButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enToSwButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(swToEnButton, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.swToEnButton.text")); // NOI18N
        swToEnButton.setFocusCycleRoot(true);
        swToEnButton.setRequestFocusEnabled(false);
        swToEnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swToEnButtonActionPerformed(evt);
            }
        });

        wordField.setText(org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.wordField.text")); // NOI18N
        wordField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                wordFieldPropertyChange(evt);
            }
        });
        wordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wordFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wordFieldKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resetButton, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.resetButton.text")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(swahiliExampleCheck, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.swahiliExampleCheck.text")); // NOI18N
        swahiliExampleCheck.setEnabled(false);
        swahiliExampleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swahiliExampleCheckActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(englishExampleCheck, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.englishExampleCheck.text")); // NOI18N
        englishExampleCheck.setEnabled(false);
        englishExampleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishExampleCheckActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(swahiliPluralCheck, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.swahiliPluralCheck.text")); // NOI18N
        swahiliPluralCheck.setEnabled(false);
        swahiliPluralCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swahiliPluralCheckActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(englishPluralCheck, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.englishPluralCheck.text")); // NOI18N
        englishPluralCheck.setEnabled(false);
        englishPluralCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishPluralCheckActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(informationLabel, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.informationLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(wordlabel, org.openide.util.NbBundle.getMessage(PaldoTopComponent.class, "PaldoTopComponent.wordlabel.text")); // NOI18N

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enToSwButton)
                            .addComponent(swToEnButton))
                        .addGap(18, 18, 18)
                        .addComponent(wordlabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordField, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                        .addComponent(informationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(englishPluralCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swahiliPluralCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(englishExampleCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swahiliExampleCheck)))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(enToSwButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(swToEnButton))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetButton)
                            .addComponent(wordlabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(swahiliExampleCheck)
                    .addComponent(englishExampleCheck)
                    .addComponent(swahiliPluralCheck)
                    .addComponent(englishPluralCheck)
                    .addComponent(informationLabel))
                .addContainerGap())
        );

        resultsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultsPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout topComponent1Layout = new javax.swing.GroupLayout(topComponent1);
        topComponent1.setLayout(topComponent1Layout);
        topComponent1Layout.setHorizontalGroup(
            topComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topComponent1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        topComponent1Layout.setVerticalGroup(
            topComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topComponent1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 693, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topComponent1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(topComponent1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enToSwButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_enToSwButtonActionPerformed
    {//GEN-HEADEREND:event_enToSwButtonActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_enToSwButtonActionPerformed

    private void swToEnButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_swToEnButtonActionPerformed
    {//GEN-HEADEREND:event_swToEnButtonActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_swToEnButtonActionPerformed

    private void wordFieldPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_wordFieldPropertyChange
    {//GEN-HEADEREND:event_wordFieldPropertyChange
        // TODO add your handling code here:
}//GEN-LAST:event_wordFieldPropertyChange

    private void wordFieldKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_wordFieldKeyPressed
    {//GEN-HEADEREND:event_wordFieldKeyPressed
        // TODO add your handling code here:
}//GEN-LAST:event_wordFieldKeyPressed

    private void wordFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_wordFieldKeyReleased
    {//GEN-HEADEREND:event_wordFieldKeyReleased
        //        if (!newWord.equalsIgnoreCase(oldWord))
        //        {
        //            EventQueue.invokeLater(new Runnable()
        //            {
        //                @Override
        //                public void run()
        //                {
        displayTranslation();
        //                }
        //            });
        //        }
}//GEN-LAST:event_wordFieldKeyReleased

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetButtonActionPerformed
    {//GEN-HEADEREND:event_resetButtonActionPerformed
        // TODO add your handling code here:
        reset();
}//GEN-LAST:event_resetButtonActionPerformed

    private void swahiliExampleCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_swahiliExampleCheckActionPerformed
    {//GEN-HEADEREND:event_swahiliExampleCheckActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_swahiliExampleCheckActionPerformed

    private void englishExampleCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_englishExampleCheckActionPerformed
    {//GEN-HEADEREND:event_englishExampleCheckActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_englishExampleCheckActionPerformed

    private void swahiliPluralCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_swahiliPluralCheckActionPerformed
    {//GEN-HEADEREND:event_swahiliPluralCheckActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_swahiliPluralCheckActionPerformed

    private void englishPluralCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_englishPluralCheckActionPerformed
    {//GEN-HEADEREND:event_englishPluralCheckActionPerformed
        // TODO add your handling code here:
        displayTranslation();
}//GEN-LAST:event_englishPluralCheckActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JRadioButton enToSwButton;
    private javax.swing.JCheckBox englishExampleCheck;
    private javax.swing.JCheckBox englishPluralCheck;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel resultsPanel;
    public static javax.swing.JRadioButton swToEnButton;
    private javax.swing.JCheckBox swahiliExampleCheck;
    private javax.swing.JCheckBox swahiliPluralCheck;
    private org.openide.windows.TopComponent topComponent1;
    public static javax.swing.JTextField wordField;
    private javax.swing.JLabel wordlabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized PaldoTopComponent getDefault()
    {
        if (instance == null)
        {
            instance = new PaldoTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PaldoTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PaldoTopComponent findInstance()
    {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null)
        {
            Logger.getLogger(PaldoTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PaldoTopComponent)
        {
            return (PaldoTopComponent) win;
        }
        Logger.getLogger(PaldoTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType()
    {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p)
    {
        if (instance == null)
        {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID()
    {
        return PREFERRED_ID;
    }


    private void displayTranslation()
    {
        final ProgressHandle progress = ProgressHandleFactory.createHandle(
                "Searching");

        class TranslatorThread extends Thread
        {

            @Override
            public void run()
            {
                //Initialize progressbar here

                progress.start();
                progress.progress(wordField.getText().trim());
                progress.switchToIndeterminate();

                String word = wordField.getText().trim();
                if (word.length() != 0)
                {
                    String fromLanguage = (enToSwButton.isSelected()) ? "English"
                            : (swToEnButton.isSelected()) ? "Swahili" : "";

                    Vector<String> fields = getDisplayableFields();

                    TableModel model = translator.getTableModel(fromLanguage, word, fields);

                    resultsTable.setModel(model);
                    resultsTable.setGridColor(new Color(205, 213, 226));
                    int results = model.getRowCount();

                    if (results == 0)
                    {
                        resultsPanel.removeAll();
                    }
                    else
                    {
                        resultsTable.addMouseListener(new MouseAdapter()
                        {

                            @Override
                            public void mouseClicked(MouseEvent e)
                            {
                                Point point = e.getPoint();
                                int column = resultsTable.columnAtPoint(point);
                                final int row = resultsTable.rowAtPoint(point);
                                final String columnName = resultsTable.getColumnName(column);
                                String cellValue = (String) resultsTable.getValueAt(row, column);
                                String oldWord = (cellValue);

                                if (e.isMetaDown())
                                {
                                    //Display a popup menu
                                    JPopupMenu popupMenu = new JPopupMenu();
                                    JMenuItem editEntry = new JMenuItem("Edit");
                                    JMenuItem deleteEntry = new JMenuItem("Delete");
                                    JMenuItem addNewEntry = new JMenuItem("Add New");
                                    popupMenu.add(editEntry);
                                    popupMenu.add(deleteEntry);
                                    popupMenu.addSeparator();
                                    popupMenu.add(addNewEntry);
                                    editEntry.addActionListener(new ActionListener()
                                    {

                                        @Override
                                        public void actionPerformed(ActionEvent e)
                                        {
                                            String newWord =
                                                    JOptionPane.showInputDialog(null, "Are you sure?");

                                            if ((newWord != null))
                                            {
                                                //Implement edit functionality here
                                                return;
                                            }
                                        }
                                    });

                                    deleteEntry.addActionListener(new ActionListener()
                                    {

                                        @Override
                                        public void actionPerformed(ActionEvent e)
                                        {
                                            //Implement delete functionality here
                                            return;
                                        }
                                    });
                                    addNewEntry.addActionListener(new ActionListener()
                                    {

                                        @Override
                                        public void actionPerformed(ActionEvent e)
                                        {
                                            //Implement Add-New functionality here
                                        }
                                    });

                                    popupMenu.show(resultsTable, point.x, point.y);
                                }
                            }
                        });


                        resultsPanel.add(scroll, BorderLayout.CENTER);
                    }

                    EventQueue.invokeLater(new Runnable()
                    {

                        @Override
                        public void run()
                        {
                            resultsPanel.updateUI();
//                            resultsPanel.repaint();
                        }
                    });
                }

                resultsPanel.putClientProperty("print.printable", Boolean.TRUE);
                resultsPanel.putClientProperty("print.size", new Dimension(700, 500)); // NOI18N

                progress.finish();
            }
        }

        TranslatorThread run = new TranslatorThread();
        Thread t = new Thread(run);
        t.start(); // start the task and progress visualization

    }

    @Override
    public UndoRedo getUndoRedo()
    {
        return manager;
    }

            /**
     * What happens when a cell value is changed
     * @param e The event that fired the table change
     */
    @Override
    public void tableChanged(TableModelEvent e)
    {
        int row = e.getFirstRow();
        int column = e.getColumn();

        TableModel model = (TableModel) e.getSource();
        String columnName = model.getColumnName(column);

        Object newWord = model.getValueAt(row, column);

        //Implement edit function here

    }

    /**Classes used for the save function*/
    private class DummyNode extends AbstractNode
    {

        SaveCookieImpl impl;

        public DummyNode()
        {
            super(Children.LEAF);
            impl = new SaveCookieImpl();
        }

        //We will call this method, i.e., dummyNode.fire(),
        //from a document listener set on the text field:
        public void fire(boolean modified)
        {
            if (modified)
            {
                //If the text is modified,
                //we add the SaveCookie implementation to the cookieset:
                getCookieSet().assign(SaveCookie.class, impl);
            }
            else
            {
                //Otherwise, we make no assignment
                //and the SaveCookie is not made available:
                getCookieSet().assign(SaveCookie.class);
            }
        }

        private class SaveCookieImpl implements SaveCookie
        {

            public void save() throws IOException
            {
                JFileChooser chooser = new JFileChooser();
                int option = chooser.showSaveDialog(null);

                switch (option)
                {
                    case 0:
                        File file = chooser.getSelectedFile();
                        FileOutputStream fos = new FileOutputStream(file);
                        fos.write(wordField.getText().getBytes());
                        fos.close();
                        fire(false);
                        break;

                    default:
                        StatusDisplayer.getDefault().setStatusText("Cancelled");
                        break;
                }
            }
        }
    }

    private void reset()
    {
        wordField.setText(null);
        englishPluralCheck.setSelected(false);
        swahiliPluralCheck.setSelected(false);
        englishExampleCheck.setSelected(false);
        swahiliExampleCheck.setSelected(false);
        resultsPanel.removeAll();
        resultsPanel.updateUI();
        resultsPanel.repaint();
        displayTranslation();
    }

     /**
     * Gets a Vector representation of the selected displayable fields
     * @return The Vector representation
     */
    private Vector<String> getDisplayableFields()
    {
        Vector<String> fields = new Vector<String>();

        Object[] languages =
        {
            "English",
            "Swahili"
        };

        if (englishExampleCheck.isSelected())
        {
            fields.add("English Example");
        }
        if (englishPluralCheck.isSelected())
        {
            fields.add("English Plural");
        }
        if (swahiliPluralCheck.isSelected())
        {
            fields.add("Swahili Plural");
        }
        if (swahiliExampleCheck.isSelected())
        {
            fields.add("Swahili Example");
        }

        return fields;
    }
}
