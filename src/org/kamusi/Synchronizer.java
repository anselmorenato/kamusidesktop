/**
 * Synchronizer.java
 * Created on Aug 6, 2009, 3:52:23 PM
 * @author arthur
 */
package org.kamusi;

import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.sql.PreparedStatement;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * Synchronizer.java
 * @author arthur
 */
public class Synchronizer
{

    /**
     * Database URL
     */
    private final String DATABASE = "jdbc:sqlite:kamusiproject.db";
    /**
     * Database username
     */
    private final String USERNAME = "";
    /**
     * Database password
     */
    private final String PASSWORD = "";
    /**
     * File that is used to log updates<BR>
     * IMPORTANT: Please DO NOT edit this file by hand
     */
    private final String editLog = "log/edit.log";
    /**
     * Holds the UNIX timestamp of when the file was last updated
     */
    private String lastUpdate = "";
    /**
     * The URL of the updates
     */
//    private final String UPDATE_URL = "http://localhost:8080/kamusiproject/";
    private final String UPDATE_URL = "http://pm.suuch.com:8080/kamusiproject/";
    /**
     * Logging facility
     */
    private LoggingUtil logger = new LoggingUtil();

    /**
     * Fetches the database updates
     * @param isEditorsVersion Boolean to check if its editors version
     */
    public void fetchUpdate(boolean isEditorsVersion)
    {

        if (isEditorsVersion)
        {
            synchronizeDatabases();
        }

        updateLocalLog();
        updateTimeStamp();

        MainWindow.showInfo("Synchronization completed successfully!");
    }

    /**
     * Synchronizes the local database with the online one
     * Applies only to editor's version of the software
     */
    private void synchronizeDatabases()
    {
        // COMMIT LOCAL CHANGES TO REMOTE SERVER
        copyLocalToRemote();
        // Download remote to local
        copyRemoteToLocal();
    }

    /**
     * Gets how much of update we have since the last sync
     * @return The size of the updates
     */
    public long getSizeOfUpdate()
    {
        long sizeOfUpdate = 0;
        try
        {
            URL url = new URL(UPDATE_URL + "fetchupdate.jsp?update=" + lastUpdate);
            URLConnection connection = url.openConnection();
            sizeOfUpdate = connection.getContentLength();
            connection.getInputStream().close();
        }
        catch (java.net.UnknownHostException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (MalformedURLException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (IOException ex)
        {
            logger.log(String.valueOf(ex));
        }
        return sizeOfUpdate;
    }

    /**
     * Loads the changes from the remote server and writes
     * them to a local log file
     */
    private void updateLocalLog()
    {
        // NOW WE UPDATE THE CHANGES NOW TO THE LOCAL FILE
        File file = new File(editLog);
        try
        {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line;

            while ((line = bufferedReader.readLine()) != null)
            {
                if (line.startsWith(";"))
                {
                    continue;
                }

                if (line.trim().length() == 0)
                {
                    System.out.println("Blank line. Skip!");
                    continue;
                }

                String[] queryArray = line.split("\\|");
                updateLocalDatabase(queryArray);
            }
            // Close the reader in preparation for the next line
            fileReader.close();
        }
        catch (Exception ex)
        {
            logger.log(String.valueOf(ex));
        }
    }

    /**
     * Sets the timestamp of the update log file to the current
     * UNIX timestamp. Useful when querying for new database updates
     */
    private void updateTimeStamp()
    {
        BufferedWriter writer = null;
        try
        {
            File file = new File(editLog);
            writer = new BufferedWriter(new FileWriter(file, false));
            long timestamp = java.util.Calendar.getInstance().getTimeInMillis();
            writer.write("# DO NOT EDIT THIS FILE BY HAND");
            writer.newLine();
            writer.write(";" + String.valueOf(timestamp));
            writer.newLine();
            writer.close();
        }
        catch (FileNotFoundException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (IOException ex)
        {
            logger.log(String.valueOf(ex));
        }
        finally
        {
            try
            {
                writer.close();
            }
            catch (IOException ex)
            {
                logger.log(String.valueOf(ex));
            }
        }
    }

    /**
     * Copies remote updates to local server
     */
    private void copyRemoteToLocal()
    {
        try
        {
            URL url = new URL(UPDATE_URL + "fetchupdate.jsp?update=" + lastUpdate);

            URLConnection connection = url.openConnection();

            BufferedInputStream inputStream = new BufferedInputStream(connection.getInputStream());
            FileOutputStream ftpFileOutputStream = new FileOutputStream("log/edit.log");

            int i = 0;
            byte[] bytesIn = new byte[1024];

            while ((i = inputStream.read(bytesIn)) >= 0)
            {
                ftpFileOutputStream.write(bytesIn, 0, i);
            }

            ftpFileOutputStream.close();
            inputStream.close();
        }
        catch (MalformedURLException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (IOException ex)
        {
            logger.log(String.valueOf(ex));
        }
    }

    /**
     * Commits the editings to remote server
     */
    private void copyLocalToRemote()
    {
        try
        {
            File inputFile = new File(editLog);
            FileReader fileReader = new FileReader(inputFile);
            BufferedReader buff = new BufferedReader(fileReader);

            String line; // <<-- added
            while (((line = buff.readLine()) != null)) // <<-- modified
            {

                if (line.startsWith(";"))
                {
                    lastUpdate = line.replace(";", "").trim();
                    continue;
                }
                if (line.startsWith("#"))
                {
                    continue;
                }

                // Call the URL
//                http://localhost:8080/kamusiproject/?column=SwahiliExample&row=1&update=Maji+ya+kunde
                String[] updateLog = line.split("\\|");
                String column = updateLog[0];
                String update = updateLog[1];
                String row = updateLog[2];

                String url = UPDATE_URL + "?column=" + column +
                        "&row=" + row + "&update=" + update.replaceAll(" ", "+");

                URL synchronize = new URL(url);

                BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                        synchronize.openStream()));
                String inputLine;
                while ((inputLine = in.readLine()) != null)
                {
                    //logger.log(inputLine);
                }
                in.close();
            }
            fileReader.close();
        }
        catch (MalformedURLException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (IOException ex)
        {
            logger.log(String.valueOf(ex));
        }
    }

    /**
     * Updates the local database with changes from the remote
     * @param queryArray
     */
    private void updateLocalDatabase(String[] queryArray)
    {

        String query = ("UPDATE DICT SET " + queryArray[0] +
                " = ? WHERE Id = ?");
        PreparedStatement statement = null;
        Connection connection = null;

        try
        {
            Class.forName("org.sqlite.JDBC").newInstance();
            connection = DriverManager.getConnection(DATABASE, USERNAME, PASSWORD);
            statement = connection.prepareStatement(query);
            statement.setString(1, queryArray[1]);
            statement.setString(2, queryArray[2]);
            statement.executeUpdate();
        }
        catch (SQLException ex)
        {
            logger.log(String.valueOf(ex));
        }
        catch (Exception ex)
        {
            logger.log(String.valueOf(ex));
        }
        finally
        {
            try
            {
                statement.close();
                connection.close();
            }
            catch (Exception ex)
            {
                logger.log(String.valueOf(ex));
            }
        }
    }
}
